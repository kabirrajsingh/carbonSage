{
    "../target_projects/proj_13f01354-0436-4cc4-b95e-225c63e5db0d/proj1/lib1.py": "import os\nimport time\n\n# CPU Heavy Task\n\ndef cpu_bound(p):\n    print(\"Starting CPU bound task\")\n    x = 0\n    for i in range(10**p):\n        x += i\n        if i % 10**p == 0:\n            print(f\"CPU bound task: {i}\")\n            time.sleep(1)\n    print(\"Exiting CPU bound task\")\n    return x\n\n# Memory Heavy Task\n\ndef memory_bound(p):\n    print(\"Starting memory bound task\")\n    x = []\n    for i in range(10**p):\n        x.append(i)\n        if i % 10**(p-1) == 0:\n            print(f\"Memory bound task: {i}\")\n            time.sleep(1)\n    print(\"Exiting memory bound task\")\n    return x\n\n# I/O Heavy Task\n\ndef io_bound(p):\n    # Generate a large file\n    print(\"Starting I/O bound task\")\n    with open(\"large_file.txt\", \"w\") as f:\n        for i in range(10**p):\n            f.write(\"Hello world!\\n\")\n            if i % 10**(p-1) == 0:\n                print(f\"I/O bound task: {i}\")\n                time.sleep(1)\n\n    # Now read the file\n    with open(\"large_file.txt\", \"r\") as f:\n        lines = f.readlines()\n        print(f\"Number of lines in the file: {len(lines)}\")\n\n    # Remove the file\n    os.remove(\"large_file.txt\")\n    print(\"Exiting I/O bound task\")\n    return len(lines)\n\n# Power heavy task\n\ndef power_bound():\n    print(\"Starting power bound task\")\n    x = 2**1000000\n    print(\"Exiting power bound task\")\n    return x\n",
    "../target_projects/proj_13f01354-0436-4cc4-b95e-225c63e5db0d/proj1/lib2.py": "import numpy as np\n\n# Bubble Sort Algorithm\n\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\n# selection_sort Algorithm\n\ndef selection_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n\n# Python inbuilt sort for numpy array\n\ndef python_sort(arr):\n    arr.sort()\n    return arr\n\n# Generate a random list\n\ndef generate_random_list(power_of_ten):\n    arr =  np.random.randint(1, 100000, 10**power_of_ten)\n    return arr\n",
    "../target_projects/proj_13f01354-0436-4cc4-b95e-225c63e5db0d/proj1/main.py": "from lib1 import *\nfrom lib2 import *\nimport argparse\n\n\nif __name__ == '__main__':\n    # Current process ID\n    print(f\"Current process ID: {os.getpid()}\")\n    parser = argparse.ArgumentParser(description=\"Process some arguments.\")\n    parser.add_argument('--cpu_power', type=int, help='Power of CPU bound task')\n    parser.add_argument('--memory_power', type=int, help='Power of memory bound task')\n    parser.add_argument('--io_power', type=int, help='Power of I/O bound task')\n    parser.add_argument('--power_of_10', type=int, help='Power of 10 for sorting list')\n    \n    args = parser.parse_args()\n\n    if args.cpu_power:\n        cpu_bound(args.cpu_power)\n\n    if args.memory_power:\n        memory_bound(args.memory_power)\n\n    if args.io_power:\n        io_bound(args.io_power)\n\n    power_bound()\n\n    if args.power_of_10:\n        arr = generate_random_list(args.power_of_10)\n        print(\"Running bubble sort ...\")\n        arr = bubble_sort(arr)\n        print(\"Running selection sort ...\")\n        arr = selection_sort(arr)\n        print(\"Running inbuilt sort ...\")\n        arr = python_sort(arr)\n\n    print(\"Exiting...\")",
    "../target_projects/proj_13f01354-0436-4cc4-b95e-225c63e5db0d/proj1/test/test.py": "1\n"
  }